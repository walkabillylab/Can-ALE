library(cancensus)
library(sf)
library(dplyr)
library(future)
library(future.apply)
library(writexl)

# 1)  API key & cache 
set_cancensus_api_key("CensusMapper_723e3f4e60999d1127c93026d17c3b50",
                      install = FALSE)

# point to an existing writable folder
Sys.setenv(CM_CACHE_PATH = "V:/CanALE/AMR")

# 2)  Download every DA polygon + the four commuter counts 
commute_vec <- c(
  "v_CA16_5792",  # TOTAL labour force (denominator)
  "v_CA16_5804",  # Walked
  "v_CA16_5807",  # Bicycle
  "v_CA16_5801"   # Public transit
)

can16 <- get_census(
  dataset    = "CA16",
  regions    = list(C = "01"),   # all of Canada
  vectors    = commute_vec,
  level      = "DA",
  geo_format = "sf",
  use_cache  = TRUE
)

# 3)  Rename long column headers to concise names 
can16 <- can16 %>%
  rename(
    total_labour_force = `v_CA16_5792: Total - Main mode of commuting for the employed labour force aged 15 years and over in private households with a usual place of work or no fixed workplace address - 25% sample data`,
    walked             = `v_CA16_5804: Walked`,
    bicycled           = `v_CA16_5807: Bicycle`,
    transit            = `v_CA16_5801: Public transit`
  )

# 4)  Project to Statistics Canada Lambert (m units) and build buffers 
sc_lambert <- 3347
can16_lam  <- st_transform(can16, sc_lambert)

centroids <- st_centroid(can16_lam)
buffers   <- st_buffer(centroids, 1000)           # 1 km radius
buffers   <- buffers %>% select(GeoUID)           # keep only DA id

# 5)  Parallel weighting function 
plan(multisession, workers = 5)
sf_use_s2(FALSE)   # speed & planar distances

buffer_worker <- function(i)
{
  buf   <- buffers[i, ]
  id    <- buf$GeoUID
  
  # polygons that intersect this buffer
  inter <- suppressWarnings(st_intersection(can16_lam, buf))
  if (nrow(inter) == 0) {
    return(data.frame(GeoUID_buf = id,
                      walk = 0, bike = 0, trans = 0,
                      total = 0,
                      area_buf_m2 = as.numeric(st_area(buf))))
  }
  
  inter <- inter %>%
    mutate(
      # original DA area (m²)
      da_area   = st_area(can16_lam[match(GeoUID, can16_lam$GeoUID), ]),
      part_area = st_area(geometry),
      frac      = pmin(as.numeric(part_area / da_area), 1)
    )
  
  agg <- inter %>%
    summarise(
      walk  = sum(walked   * frac, na.rm = TRUE),
      bike  = sum(bicycled * frac, na.rm = TRUE),
      trans = sum(transit  * frac, na.rm = TRUE),
      total = sum(total_labour_force * frac, na.rm = TRUE),
      .groups = "drop"
    )
  
  data.frame(
    GeoUID_buf = id,
    walk  = agg$walk,
    bike  = agg$bike,
    trans = agg$trans,
    total = agg$total,
    area_buf_m2 = as.numeric(st_area(buf))
  )
}

out_list <- future_lapply(seq_len(nrow(buffers)), buffer_worker, future.seed = FALSE)
agg_df   <- bind_rows(out_list)

# 6)  Rates 
final <- agg_df %>%
  mutate(
    walk_rate              = ifelse(total == 0, NA, walk  / total),
    active_transport_rate  = ifelse(total == 0, NA, (walk + bike + trans) / total)
  ) %>%
  select(GeoUID = GeoUID_buf, everything())

# 7)  Export 
out_xlsx <- "V:/CanALE/AMR/commute_rates_Canada_2016_buffer1km.xlsx"
write_xlsx(final, out_xlsx)

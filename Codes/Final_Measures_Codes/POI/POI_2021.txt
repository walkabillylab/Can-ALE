# Load the required libraries

library(sf)
library(dplyr)
library(tidyr)
library(future); library(future.apply)
library(writexl)
library(purrr)

# 1. INITIAL SETUP

start_time_all <- Sys.time()
plan(multisession, workers = 5)
sf::sf_use_s2(FALSE)
options(future.globals.maxSize = 2 * 1024^3)

# 2. DEFINE REQUIRED DATA PATHS AND PROVINCE LIST

da_path <- "V:/CanALE/Data/DA/DA_2021/lda_000b21a_e.shp"
centroid_path <- "V:/CanALE/Data/PopWeighted_Centroid/DA_2021_hybrid_centroids_Canada.gpkg"
poi_base_dir <- "V:/CanALE/POI/2021"
output_base_path <- "V:/CanALE/Data/POI/POI_Weighted/2021"
crs_projected <- 3347

provinces <- list(
  "NL" = "10", "PE" = "11", "NS" = "12", "NB" = "13",
  "QC" = "24", "ON" = "35", "MB" = "46", "SK" = "47",
  "AB" = "48", "BC" = "59", "YK" = "60", "NWT" = "61", "NU" = "62"
)

# 3. LOAD DA shapefile and pre-calculated centroids

DA_Canada <- st_read(da_path, quiet = TRUE)
DA_Canada_Centroids <- st_read(centroid_path, quiet = TRUE)

# 4. START LOOPING THROUGH EACH PROVINCE
for (prov_abbr in names(provinces)) {
  prov_pruid <- provinces[[prov_abbr]]
  start_time_province <- Sys.time()
  
  # LOAD PROVINCIAL DATA AND CREATE BUFFERS
  
  # Filter the national DA file
  DA_prov <- DA_Canada %>%
    filter(PRUID == prov_pruid) %>%
    st_transform(crs_projected)
  
  # Filter the pre-loaded CANADA centroids
  centroids_prov <- DA_Canada_Centroids %>%
    mutate(PRUID = substr(DAUID, 1, 2)) %>%
    filter(PRUID == prov_pruid) %>%
    st_transform(crs_projected)
  
  # Create 1 km buffer

  buffers <- st_buffer(centroids_prov, 1000)
  
  # 5. LOAD, FILTER POIs and WEIGHTS ASSIGNMENT
  
  poi_dir <- file.path(poi_base_dir, paste0(prov_abbr, "_POI"))
  
  
  # Define the two required POI shapefiles
  poi_files <- file.path(
    poi_dir, c("gis_osm_pois_free_1.shp", "gis_osm_pois_a_free_1.shp")
  )
  
  if (length(poi_files) == 0) {
    cat("No POI shapefiles found for", prov_abbr, ". Skipping to next province.\n")
    next
  }
  
  pois <- future_lapply(poi_files, \(f){
    p <- st_read(f, quiet = TRUE) |> st_transform(crs_projected)
    if (any(grepl("POLYGON", unique(st_geometry_type(p)))))
      p <- st_make_valid(p) |> st_centroid()
    p
  }) |> bind_rows()
  
  # Filter out "unwanted" POI codes
  undesired <- c(2423, 2725, 2424, 2951, 2961, 2734, 2422)
  pois <- filter(pois, !(code %in% undesired))
  
  # ASSIGN FIRST WEIGHTS
  
  # Define code-based weights
  wt_2 <- c(2014,2111,2602,2721,2601,2542,2515,2516,2203,2121,2120,2903,2110,2401,2402,2722,2519,2101,2004,2005,2099,2522,2201,2744,2008,2590,2592,2906)
  wt_3 <- c(2305,2403,2902,2566,2307,2303,2084,2012,2505,2206,2302,2306,2257,2083,2007,2504,2527,2741,2252,2304,2301,2256,2253,2901,2081)
  wt_4 <- c(2016,2502,2510,2511,2528,2204,2205,2082,2251,2501)
  
  # Assign named vector
  code_weights <- setNames(rep(1, length(unique(pois$code))), unique(pois$code))
  code_weights[names(code_weights) %in% as.character(wt_2)] <- 2
  code_weights[names(code_weights) %in% as.character(wt_3)] <- 3
  code_weights[names(code_weights) %in% as.character(wt_4)] <- 4
  
  # ASSIGN SECOND WEIGHTS (Distance Decay Function)
  
  joined <- st_join(pois, buffers) |> filter(!is.na(DAUID))
  
  # Add centroid geometry column for distance calculation
  # This is a more robust way to create the centroid lookup table
  cent_tbl <- centroids_prov %>%
    mutate(geom_cent = st_geometry(.)) %>% # Explicitly copy geometry
    st_drop_geometry() %>%                 # Remove the original sticky geometry
    select(DAUID, geom_cent)               # Keep only the ID and the new geometry column
  
  joined <- left_join(joined, cent_tbl, by = "DAUID")
  
  # Calculate distance from each POI to its DA's weighted centroid
  joined$dist_m <- as.numeric(st_distance(st_geometry(joined), joined$geom_cent, by_element = TRUE))
  
  # Calculate distance decay weights
  decay_wt <- 1.0126 * exp(-0.0013 * joined$dist_m)
  joined$code_wt <- code_weights[as.character(joined$code)]
  joined$final_wt <- decay_wt * joined$code_wt
  
  # 6. AGGREGATE TO DA AND EXPORT FINAL RESULT
  
  summary <- joined |>
    group_by(DAUID) |>
    summarise(raw_poi_count = n(),
              weighted_poi_index = sum(final_wt),
              .groups = "drop")
  
  all_da_ids <- st_drop_geometry(DA_prov) |> select(DAUID)
  
  final_results <- all_da_ids |>
    left_join(summary, by = "DAUID") |>
    mutate(across(c(raw_poi_count, weighted_poi_index), \(x) tidyr::replace_na(x, 0)))
  
  # Export results
  output_filename <- paste0("POI_weighted_decay_", prov_abbr, "_2021.xlsx")
  output_path <- file.path(output_base_path, output_filename)
  write_xlsx(final_results, output_path)
  
  end_time_province <- Sys.time()
  cat("--- Completed", prov_abbr, "in", difftime(end_time_province, start_time_province, units="mins"), "minutes ---\n")
}


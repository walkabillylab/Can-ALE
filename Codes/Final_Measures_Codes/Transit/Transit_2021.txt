# Load the required libraries

library(sf)
library(dplyr)
library(data.table)
library(future.apply)
library(writexl)
library(cancensus)
library(centr)
library(purrr)


# 1. INITIAL SETUP
start_time_all <- Sys.time()

set_cancensus_api_key("CensusMapper_723e3f4e60999d1127c93026d17c3b50", install = TRUE, overwrite = TRUE)
set_cancensus_cache_path("V:/CanALE/cancensuscache", install = TRUE, overwrite = TRUE)
plan(multisession, workers = 5)
sf_use_s2(FALSE)

# 2. DEFINE REQUIRED DATA PATHS AND PROVINCE LIST

da_path <- "V:/CanALE/Data/DA/DA_2021/lda_000b21a_e.shp"
centroid_path <- "V:/CanALE/Data/PopWeighted_Centroid/DA_2021_hybrid_centroids_Canada.gpkg" 
gtfs_base_path <- "V:/CanALE/Data/GTFS/GTFS_2021/unzipped_files"
output_base_path <- "V:/CanALE/Data/TransitCounts/2021"
crs_projected <- 3347 

provinces <- list(
  "NL" = "10", "PE" = "11", "NS" = "12", "NB" = "13",
  "QC" = "24", "ON" = "35", "MB" = "46", "SK" = "47",
  "AB" = "48", "BC" = "59"
)

# 3. LOAD DA shapefile and pre-calculated weighred centroids

DA_Canada <- st_read(da_path, quiet = TRUE)
DA_Canada_Centroids <- st_read(centroid_path, quiet = TRUE)

# 4. START LOOPING THROUGH EACH PROVINCE
for (prov_abbr in names(provinces)) {
  prov_pruid <- provinces[[prov_abbr]]
  
  cat("\n===========================================================\n")
  cat("=== Starting processing for:", prov_abbr, "(PRUID:", prov_pruid, ") ===\n")
  cat("===========================================================\n\n")
  start_time_province <- Sys.time()
  
  
  DA_prov <- DA_Canada %>%
    filter(PRUID == prov_pruid) %>%
    st_transform(crs_projected)
  
  DA_centroids_prov <- DA_Canada_Centroids %>%
    mutate(PRUID = substr(DAUID, 1, 2)) %>%
    filter(PRUID == prov_pruid) %>%
    st_transform(crs_projected) 
  
  # Create 1 km buffer
  
  DA_buffers <- st_buffer(DA_centroids_prov, 1000)
  
# 5. LOAD AND MERGE GTFS STOP FILES
  transit_path <- file.path(gtfs_base_path, prov_abbr) 
  stop_files <- list.files(transit_path, pattern = "stops.txt$", recursive = TRUE, full.names = TRUE)
  
  if (length(stop_files) > 0) {
    process_stop_file <- function(file) {
      stops <- tryCatch(fread(file), error = function(e) NULL)
      if (is.null(stops) || !all(c("stop_id", "stop_lat", "stop_lon") %in% names(stops))) return(NULL)
      stops <- stops %>%
        select(stop_id, stop_lat, stop_lon) %>%
        filter(!is.na(stop_lat) & !is.na(stop_lon))
      return(stops)
    }
    
    all_stops <- future_lapply(stop_files, process_stop_file)
    merged_stops <- rbindlist(all_stops[!sapply(all_stops, is.null)])
    
    stops_sf <- st_as_sf(
      merged_stops, coords = c("stop_lon", "stop_lat"), crs = 4326
    ) %>% st_transform(crs_projected)
    
 # 6. COUNT STOPS IN BUFFER

    stops_in_buffers <- st_join(DA_buffers, stops_sf, join = st_intersects)
    results_df <- stops_in_buffers %>%
      st_drop_geometry() %>%
      group_by(DAUID) %>%
      summarise(transit_stop_count = n_distinct(stop_id, na.rm = TRUE))
    
  } else {
    cat("No transit stop files found for", prov_abbr, ". Counts will be zero.\n")
    results_df <- data.frame(DAUID = character(0), transit_stop_count = numeric(0))
  }
  
  all_da_ids <- st_drop_geometry(DA_prov) %>% select(DAUID)
  
  final_results <- all_da_ids %>%
    left_join(results_df, by = "DAUID") %>%
    mutate(transit_stop_count = ifelse(is.na(transit_stop_count), 0, transit_stop_count))
  
  # 7. EXPORT FINAL RESULTS
  output_filename <- paste0("transit_stop_counts_", prov_abbr, "_all_hybrid_centroids.xlsx")
  output_path <- file.path(output_base_path, output_filename)
  
  write_xlsx(final_results, output_path)
  
  end_time_province <- Sys.time()
  cat("--- Completed", prov_abbr, "in", difftime(end_time_province, start_time_province, units="mins"), "minutes ---\n")
}

cat("\n===========================================================\n")
cat("=== ALL PROVINCES COMPLETED SUCCESSFULLY ===\n")
cat("Total running time:", difftime(Sys.time(), start_time_all, units="hours"), "hours\n")
cat("===========================================================\n")

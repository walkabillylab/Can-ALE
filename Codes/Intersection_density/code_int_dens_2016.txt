
# Setting the required libraries

library(sf)
library(dplyr)
library(writexl)
library(lwgeom)
library(tidyr)
library(future.apply)  # For parallel (future) processing

# 1. SETUP ---------------------------------------------------------------------
start_time <- Sys.time()


# Configuring parallel processing for an i7-8700 CPU (6 cores, 12 threads)
# Allocating 5 cores for processing and reserving 1 core for system tasks
plan(multisession, workers = 5)

# Increase Memory Limit for Parallel Processing
options(future.globals.maxSize = 1 * 1024^3) 

sf_use_s2(FALSE)  # Use planar GEOS operations in EPSG:3347

# We'll use NAD83 / Statistics Canada Lambert for large-scale distance/area
crs_projected <- 3347

# Setting Dissemination Area and Road Network Paths
da_path <- "V:/CanALE/Data/DA/DA_2016/lda_000b16a_e.shp"
rnf_path <- "V:/CanALE/Data/RNF/lrnf000r16a_e.shp"

# Define provinces and their PRUIDs
provinces <- list(
  "Alberta" = 48,
  "Newfoundland" = 10,
  "Prince Edward Island" = 11,
  "Nova Scotia" = 12,
  "New Brunswick" = 13,
  "Quebec" = 24,
  "Ontario" = 35,
  "Manitoba" = 46,
  "Saskatchewan" = 47,
  "British Columbia" = 59,
  "Yukon" = 60,
  "Northwest Territories" = 61,
  "Nunavut" = 62
)

for (province in names(provinces)) {
  pruid <- provinces[[province]]
  cat("Processing", province, "...\n")
  start_time_province <- Sys.time()
  
  # Load province-specific data
  DA <- st_read(da_path, quiet = TRUE)
  DA_province <- DA %>% 
    filter(PRUID == pruid) %>%
    st_transform(crs_projected)
  
  # Create 1 km buffers around DA centroids
  DA_centroids <- st_centroid(DA_province)
  DA_buffers <- st_buffer(DA_centroids, 1000) # 1 km buffer
  
  # Load roads for the province
  roads <- st_read(rnf_path, quiet = TRUE)
  roads_province <- roads %>%
    filter(PRUID_L == pruid) %>%
    st_make_valid() %>%
    st_transform(crs_projected)
  
  # Remove limited-access highways
  limited_access_classes <- c(10, 11, 12, 13)
  roads_province <- roads_province %>% 
    filter(!CLASS %in% limited_access_classes)
  
  # Create a tile grid over the province
  province_bbox <- st_bbox(DA_province)   # bounding box of all province DAs
  expansion <- 2000             # optional: expand bounding box by 2 km
  xmin <- province_bbox["xmin"] - expansion
  ymin <- province_bbox["ymin"] - expansion
  xmax <- province_bbox["xmax"] + expansion
  ymax <- province_bbox["ymax"] + expansion
  
  tile_size <- 10000  # 10 km x 10 km tiles (adjust based on memory/CPU)
  
  grid <- st_make_grid(
    cellsize = tile_size,
    offset   = c(xmin, ymin),
    what     = "polygons",
    crs      = crs_projected,
    n = c(ceiling((xmax - xmin) / tile_size),
          ceiling((ymax - ymin) / tile_size))
  )
  
  grid_sf <- st_sf(geometry = grid)
  
  # Function to process a single tile
  process_tile <- function(tile_polygon, roads_data, buffers_sf) {
    # Intersect roads with the tile to get local roads
    local_roads <- st_intersection(roads_data, tile_polygon)
    local_roads <- st_collection_extract(local_roads, "LINESTRING")
    
    if (nrow(local_roads) == 0) {
      # No roads => no intersections
      return(NULL)
    }
    
    # Identify 3+ way intersection points
    all_intersections <- st_intersection(local_roads)
    points_only       <- all_intersections[st_geometry_type(all_intersections) == "POINT", ]
    if (nrow(points_only) == 0) {
      return(NULL)
    }
    points_union <- st_union(points_only)
    
    # Split roads at intersection points
    roads_noded <- lwgeom::st_split(local_roads, points_union)
    roads_noded <- st_collection_extract(roads_noded, "LINESTRING")
    
    # Extract endpoints and count intersections
    coords <- st_coordinates(roads_noded)
    endpoints <- as.data.frame(coords) %>%
      dplyr::group_by(L1) %>%
      dplyr::summarize(
        X_start = dplyr::first(X),
        Y_start = dplyr::first(Y),
        X_end   = dplyr::last(X),
        Y_end   = dplyr::last(Y),
        .groups = "drop"
      )
    
    all_points <- endpoints %>%
      tidyr::pivot_longer(
        cols = c(X_start, Y_start, X_end, Y_end),
        names_to = c("coord", "pos"),
        names_pattern = "(X|Y)_(start|end)"
      ) %>%
      tidyr::pivot_wider(names_from = coord, values_from = value) %>%
      dplyr::select(X, Y)
    
    point_counts <- all_points %>%
      dplyr::group_by(X, Y) %>%
      dplyr::summarize(n_lines = dplyr::n(), .groups = "drop")
    
    int_3plus <- point_counts %>%
      dplyr::filter(n_lines >= 3)
    
    if (nrow(int_3plus) == 0) {
      return(NULL)
    }
    
    int_3plus_sf <- st_as_sf(int_3plus, coords = c("X","Y"), crs = crs_projected)
    
    # Count intersections within DAs that overlap this tile
    tile_das <- st_intersection(buffers_sf, tile_polygon)
    if (nrow(tile_das) == 0) {
      return(NULL)
    }
    
    ints_in_buffers <- st_intersects(tile_das, int_3plus_sf)
    tile_das$intersection_count   <- lengths(ints_in_buffers)
    tile_das$intersection_density <- tile_das$intersection_count / pi  # area of 1 km buffer
    
    return(tile_das)
  }
  
  # Process tiles in parallel
  results_list <- future_lapply(
    X            = seq_len(nrow(grid_sf)),
    future.seed  = TRUE,   # ensures reproducible seeds
    FUN          = function(i) {
      tile_poly  <- grid_sf[i, ]
      tile_result <- process_tile(tile_poly, roads_province, DA_buffers)
      
      # Optional progress
      if (i %% 50 == 0) {
        cat("Processed tile", i, "of", nrow(grid_sf), "for", province, "\n")
      }
      
      tile_result
    }
  )
  
  # Combine results
  results_list <- Filter(Negate(is.null), results_list)  # remove NULL entries
  if (length(results_list) > 0) {
    combined_results <- do.call(rbind, results_list)
  } else {
    # no intersections at all
    combined_results <- DA_buffers
    combined_results$intersection_count   <- 0
    combined_results$intersection_density <- 0
  }
  
  # Aggregate results per DA buffer
  final_results <- combined_results %>%
    group_by(DAUID) %>%
    summarize(
      intersection_count   = max(intersection_count),
      intersection_density = max(intersection_density),
      .groups = "drop"
    )
  
  # Export results to Excel
  output_path <- paste0("V:/CanALE/Data/intersection_results_", tolower(gsub(" ", "_", province)), "_chunked_parallel.xlsx")
  write_xlsx(as.data.frame(final_results[, c("DAUID", "intersection_count", "intersection_density")]), output_path)
  
  cat("Completed processing for", province, "in", Sys.time() - start_time_province, "\n")
}

cat("All provinces completed successfully in", Sys.time() - start_time, "\n")

library(sf)
library(dplyr)
library(data.table)
library(future.apply)  
library(writexl)

# 1. SETUP 
start_time <- Sys.time()

# Parallel processing setup (5 cores)
plan(multisession, workers = 5)

# Disable s2 geometry for planar calculations
sf_use_s2(FALSE)

# Paths
da_path <- "V:/CanALE/Data/DA/DA_2021/lda_000b21a_e.shp"

transit_path <- "V:/CanALE/Data/GTFS/GTFS_2021/unzipped_files/PE"

# CRS for projections
crs_projected <- 3347  # NAD83 / Statistics Canada Lambert

# 2. LOAD DISSEMINATION AREAS 
# Load dissemination areas and filter for PE
DA <- st_read(da_path, quiet = TRUE)
DA_ab <- DA %>%
  filter(PRUID == "11") %>%
  st_transform(crs_projected)

# Create 1 km buffers around DA centroids
DA_centroids <- st_centroid(DA_ab)
DA_buffers <- st_buffer(DA_centroids, 1000)  # 1 km buffer

# 3. LOAD AND MERGE GTFS STOP FILES 
# List all stop.txt files in the Transit folder
stop_files <- list.files(transit_path, pattern = "stops.txt$", recursive = TRUE, full.names = TRUE)

# Function to read and process each stops.txt file
process_stop_file <- function(file) {
  stops <- fread(file)
  # Ensure required columns (adjust column names if needed)
  stops <- stops %>%
    select(stop_id, stop_lat, stop_lon) %>%
    filter(!is.na(stop_lat) & !is.na(stop_lon))
  return(stops)
}

# Read and merge all stops.txt files in parallel
all_stops <- future_lapply(stop_files, process_stop_file)
merged_stops <- rbindlist(all_stops)

# Convert to an sf object
stops_sf <- st_as_sf(
  merged_stops,
  coords = c("stop_lon", "stop_lat"),
  crs = 4326  # WGS 84
) %>%
  st_transform(crs_projected)  # Transform to the same CRS as buffers

# 4. FUNCTION TO PROCESS A SINGLE BUFFER 
process_buffer <- function(buffer, stops) {
  # Intersect stops with the buffer
  intersected_stops <- st_intersects(buffer, stops, sparse = FALSE)
  count <- sum(intersected_stops)  # Count number of intersected stops
  return(count)
}

# 5. PARALLEL PROCESSING OVER BUFFERS 
results <- future_lapply(
  X = seq_len(nrow(DA_buffers)),
  FUN = function(i) {
    buffer <- DA_buffers[i, ]
    count <- process_buffer(buffer, stops_sf)
    data.frame(DAUID = buffer$DAUID, transit_stop_count = count)
  }
)

# Combine results
final_results <- do.call(rbind, results)

# 6. EXPORT RESULTS ------------------------------------------------------------
output_path <- "V:/CanALE/Data/TransitCounts/2021/transit_stop_counts_PE_all.xlsx"
write_xlsx(final_results, output_path)

# Print runtime
end_time <- Sys.time()
cat("Total running time:", end_time - start_time, "\n")

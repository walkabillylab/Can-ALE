# FINAL SCRIPT FOR 2011
# CALCULATE POPULATION & DWELLING DENSITIES WITHIN 1KM BUFFERS AROUND EACH DISSEMINATION AREA CENTROID USING CANCENSUS PACKAGE

# Install and Load Required Packages
install.packages(c("cancensus", "sf", "dplyr", "writexl", "purrr", "future", "future.apply"))
library(cancensus)
library(sf)
library(dplyr)
library(writexl)
library(purrr)
library(future)
library(future.apply)

# Set Up a Persistent Cache Directory (modify path if needed)
set_cancensus_cache_path("V:/CanALE_30Mar2025/cache", install = TRUE, overwrite = TRUE)

# Set or Your CensusMapper API Key
set_cancensus_api_key("CensusMapper_723e3f4e60999d1127c93026d17c3b50", install = TRUE, overwrite = TRUE)

# Choose Province Code (PRUID) 
# NL=10, PE=11, NS=12, NB=13, QC=24, ON=35, MB=46,SK=47, AB=48, BC=59, YK=60, NWT=61, Nunavut=62
pr_code <- "47"   # Modify for your province

# Configure Parallel Processing (using 5 cores)
plan(multisession, workers = 5)
options(future.globals.maxSize = 1 * 1024^3)  # ~1 GB; adjust if needed

# Define Output File Path
output_xlsx <- paste0("V:/CanALE_30Mar2025/Data/province_", pr_code, 
                      "_dwelling_population_density_1km_2011.xlsx")

# Download 2011 Census Data for the Chosen Province using cancensus
prov_census <- get_census(
  dataset = "CA11",             # 2011 Census data
  regions = list(PR = pr_code), # Selected province
  vectors = c("v_CA11F_1",      # 2011 total population
              "v_CA11F_2"),     # 2011 total private dwellings
  level = "DA",
  geo_format = "sf",
  use_cache = TRUE
)

# Print Column Names for Verification
print(names(prov_census))

# Rename Columns EXACTLY as shown by print(names(prov_census))
# e.g. "v_CA11F_1: Population, 2011" and "v_CA11F_2: Total private dwellings"
prov_census <- prov_census %>%
  rename(
    population_2011        = `v_CA11F_1: Population, 2011`,
    private_dwellings_2011 = `v_CA11F_2: Total private dwellings`
  )

# Transform DA Polygons to EPSG:3347 and Filter Out NAs
prov_census_3347 <- st_transform(prov_census, 3347) %>%
  filter(!is.na(population_2011) & !is.na(private_dwellings_2011))

# Compute DA Centroids & 1-km Buffers
da_centroids <- st_centroid(prov_census_3347)
da_buffers   <- st_buffer(da_centroids, dist = 1000)  # 1 km radius

# Keep only the DA identifier (GeoUID)
da_buffers <- da_buffers %>% select(GeoUID)

# Partial Intersection Function (Weighing Method)
buffer_intersect <- function(i) {
  one_buffer  <- da_buffers[i, ]
  buffer_id   <- one_buffer$GeoUID
  
  # Intersect the buffer with all DA polygons in the province
  inter <- suppressWarnings(st_intersection(prov_census_3347, one_buffer))
  
  # For each intersected polygon, compute fraction
  inter <- inter %>%
    mutate(
      area_original = st_area(prov_census_3347[match(GeoUID, prov_census_3347$GeoUID), ]),
      area_part     = st_area(geometry),
      frac          = pmin(as.numeric(area_part / area_original), 1)
    )
  
  # Weighted sums for population & dwellings
  pop_sum  <- sum(inter$population_2011 * inter$frac, na.rm = TRUE)
  dwel_sum <- sum(inter$private_dwellings_2011 * inter$frac, na.rm = TRUE)
  
  # Buffer area in square meters (3141593 m²)
  buffer_area_m2 <- as.numeric(st_area(one_buffer))
  
  data.frame(
    GeoUID_buffer  = buffer_id,
    pop_in_buffer  = pop_sum,
    dwel_in_buffer = dwel_sum,
    buffer_area_m2 = buffer_area_m2
  )
}

# Apply Partial Intersection in Parallel
n_buffers <- nrow(da_buffers)
results_list <- future_lapply(seq_len(n_buffers), buffer_intersect, future.seed = FALSE)
results_df   <- do.call(rbind, results_list)

# Merge Results and Compute 1-km Buffer Densities
final_results <- da_buffers %>%
  st_set_geometry(NULL) %>%
  rename(GeoUID_da = GeoUID) %>%
  left_join(results_df, by = c("GeoUID_da" = "GeoUID_buffer")) %>%
  mutate(
    pop_density_1km  = pop_in_buffer / (buffer_area_m2 / 1e6),   # people per km²
    dwel_density_1km = dwel_in_buffer / (buffer_area_m2 / 1e6)    # dwellings per km²
  )

# Write Final Results to Excel
write_xlsx(final_results, output_xlsx)
